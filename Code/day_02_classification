#Day two
  # R code for classifying images

# install.packages("patchwork")

library(terra)
library(imageRy)
library(ggplot2)
library(patchwork)
# I could not find the repository of the imageRy library to copy the clasification function
im.list()

mato1992 = im.import("matogrosso_l5_1992219_lrg.jpg")
mato1992 = flip(mato1992)
plot(mato1992)

mato2006 = im.import("matogrosso_ast_2006209_lrg.jpg")
mato2006 = flip(mato2006)
plot(mato2006)

mato1992c = im.classify(mato1992, num_clusters=2)
# class 1 = human
# class 2 = forest

mato2006c = im.classify(mato2006, num_clusters=2)
# class 1 = forest
# class 2 = human

f1992 = freq(mato1992c)
tot1992 = ncell(mato1992c)
prop1992 = f1992 / tot1992
perc1992 = prop1992 * 100

# human = 17%, forest = 83%

perc2006 = freq(mato2006c) * 100 / ncell(mato2006c)

# human = 54%, forest = 45%

# Creating dataframe

class = c("Forest","Human")
y1992 = c(83,17)
y2006 = c(45,55)
tabout = data.frame(class, y1992, y2006)

p1 = ggplot(tabout, aes(x=class, y=y1992, color=class)) + 
  geom_bar(stat="identity", fill="white") + 
  ylim(c(0,100))

p2 = ggplot(tabout, aes(x=class, y=y2006, color=class)) + 
  geom_bar(stat="identity", fill="white") + 
  ylim(c(0,100))

p1 + p2
p1 / p2

p0 = im.ggplot(mato1992)
p00 = im.ggplot(mato2006)
  
p0 + p00 + p1 + p2

% https://stackoverflow.com/questions/52684424/show-the-percentage-instead-of-count-in-histogram-using-ggplot2-r


#----- Day 2

# Coloring bars

ggplot(tabout, aes(x=class, y=y2006, fill=class, color=class)) + 
  geom_bar(stat="identity") + 
  ylim(c(0,100))

# https://www.sthda.com/english/wiki/ggplot2-barplots-quick-start-guide-r-software-and-data-visualization

# Horizontal bars

p1 = ggplot(tabout, aes(x=class, y=y1992, color=class)) +
  geom_bar(stat="identity", fill="white") +
  ylim(c(0,100)) +
  coord_flip()

p2 = ggplot(tabout, aes(x=class, y=y2006, color=class)) +
  geom_bar(stat="identity", fill="white") +
  ylim(c(0,100)) +
  coord_flip()

p1 / p2

classall = c("Forest1992","Human1992","Forest2006","Human2006")
percentage = c(83,17,45,55)
all = data.frame(classall, percentage)

# Stacked barplot with multiple groups
ggplot(data=all, aes(x=classall, y=percentage, color=classall)) +
  geom_bar(stat="identity", fill="white")

#---- Solar Orbiter

im.list()

solar = im.import("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg")

# Exercise: classify the image in three classes - im.classify()
solarc = im.classify(solar, num_clusters=3)

# Plot the original image beside the classified one
dev.off()
im.multiframe(1,2)
plot(solar)
plot(solarc)

# 3 = low
# 1 = medium
# 2 = high

dev.off()
solarcs = subst(solarc, c(3,1,2), c("c1_low","c2_medium","c3_high"))
plot(solarcs)

# Exercise: calculate the percentages of the Sun enrgy classes with one line of code

percsolar = freq(solarcs)$count * 100 / ncell(solarcs)

# [1] 37.92693 41.04342 21.02965
# [1] 38 41 21

# create dataframe
class = c("c1_low","c2_medium","c3_high")
# check names in the object
perc = c(38,41,21)
tabsol = data.frame(class, perc)

# final ggplot

ggplot(tabsol, aes(x=class, y=perc, fill=class, color=class)) +
  geom_bar(stat="identity") +
#  ylim(c(0,100)) 
  coord_flip() 
# + scale_y_reverse()



  ##############################################
  #' Classify a Raster Image Using K-Means Clustering
#'
#' This function performs unsupervised classification on a raster image using k-means clustering.
#' It assigns each pixel to a cluster and optionally visualizes the classified image.
#'
#' @param input_image A `SpatRaster` object representing the input raster image.
#' @param num_clusters An integer specifying the number of clusters (default: 3).
#' @param seed An optional integer seed for reproducibility of k-means clustering results (default: NULL).
#' @param do_plot A logical value indicating whether to display the classified raster (default: TRUE).
#' @param custom_colors A vector of custom colors to be used for classification visualization (default: NULL).
#' If NULL, a predefined set of colors is used.
#' @param num_colors The number of colors to interpolate in the visualization palette (default: 100).
#'
#' @return A `SpatRaster` object with cluster assignments, where each pixel belongs to a classified cluster.
#'
#' @details
#' The function applies k-means clustering on the pixel values of the raster image. Each pixel is treated
#' as a multi-dimensional point, where each band represents a feature. The classified raster assigns
#' each pixel to a cluster, which can be visualized using a color palette.
#'
#' - If `custom_colors` is provided, it is used as the classification color palette.
#' - If `seed` is provided, it ensures reproducibility of k-means clustering.
#' - If `do_plot = TRUE`, the classified raster is displayed with the chosen color scheme.
#'
#' @references
#' K-means clustering is a widely used unsupervised classification algorithm. For more information, see:
#' \url{https://en.wikipedia.org/wiki/K-means_clustering}
#'
#' @seealso [im.import()], [im.ridgeline()]
#'
#' @examples
#' \dontrun{
#' library(terra)
#' 
#' # Load a raster dataset
#' r <- rast(system.file("ex/elev.tif", package = "terra"))
#' 
#' # Perform k-means classification with 4 clusters
#' classified_raster <- im.classify(r, num_clusters = 4, seed = 123, do_plot = TRUE)
#' }
#'
#' @export
im.classify <- function(input_image, num_clusters = 3, seed = NULL, do_plot = TRUE, custom_colors = NULL, num_colors = 100) {
  # Set a default color palette. These colors are used for visualization after classification.
  base_colors <- c('khaki', 'slateblue', 'olivedrab', 'salmon', 'lightpink', 'darkgrey')
  
  # Determine which color palette to use.
  colors <- if (is.null(custom_colors)) {
    # If the number of clusters exceeds the number of base colors, interpolate additional colors.
    if (num_clusters > length(base_colors)) {
      colorRampPalette(base_colors)(num_clusters)
    } else {
      base_colors[1:num_clusters]
    }
  } else {
    # For custom colors, extend or repeat them to match the number of clusters.
    if (num_clusters > length(custom_colors)) {
      colorRampPalette(custom_colors)(num_clusters)
    } else {
      custom_colors[1:num_clusters]
    }
  }
  
  # Check if the input is indeed a SpatRaster object, which is required for the function to work properly.
  if (!inherits(input_image, "SpatRaster")) {
    stop("input_image should be a SpatRaster object.")
  }
  
  # Convert raster data into a matrix format, where each row is a pixel and each column is a band.
  image_values <- na.omit(terra::as.matrix(input_image))
  
  # Set a random seed for reproducibility of k-means clustering results, if specified.
  if (!is.null(seed)) {
    set.seed(seed)
  }
  
  # Perform k-means clustering on the pixel values. Each pixel is treated as a multi-dimensional point based on its bands.
  kmeans_result <- kmeans(image_values, centers = num_clusters)
  
  # Initialize a new raster for the classification results, using the first layer of the original raster.
  classified_image <- input_image[[1]]
  # Assign cluster IDs from k-means results to each pixel in the new raster.
  values(classified_image) <- kmeans_result$cluster
  
  # If plotting is enabled, visualize the classified raster using the chosen color palette.
  if (do_plot) {
    color_palette <- colorRampPalette(colors)(num_colors)
    plot(classified_image, col = color_palette, axes = FALSE)
  }
  
  # Return the raster object with classification results.
  return(classified_image)
}
